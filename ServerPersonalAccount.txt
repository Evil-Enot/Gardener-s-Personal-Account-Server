#Область APIЛичногоКабинета

#Область МетодыЛичногоКабинета

// Проверка работы сервера
Функция CheckUrlGET(Запрос)
	Возврат Новый HTTPСервисОтвет(200);
КонецФункции

// Авторизация пользователя по ФИО и номеру телефона
Функция CheckUserByNumberPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	Ответ = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	Пользователь = Справочники.Контрагенты.НайтиПоНаименованию(ФИО);
	
	Если Не Пользователь.Пустая() Тогда 
		// Если пользователь найден, получаем из запроса его номер телефона
		НомерТелефона = "";
		ДанныеJSON.Свойство("number", НомерТелефона);
		
		// Получаем из базы сохраненный телефон пользователя
		НомерПользователь = Пользователь.КонтактнаяИнформация.Итог("НомерТелефона");
		Если Число(НомерТелефона) = НомерПользователь Тогда
			// Если номера сопадают, то генерируем код для аутентификации и отправляем его пользовтелю
			Код = ГенерацияИОтправкаКодаАвторизации(НомерТелефона);
			
			Если Код = 0 Тогда
				// Если при отправке кода произошла ошибка, выводим ответ с кодом 400 
				Ответ.Вставить("error", ИСТИНА);
	 			Ответ.Вставить("message", "Не удалось отправить код для аутентификации");
				СтрокаДляОтвета = ДанныеКакJSON(Ответ);
				Возврат Ответ(СтрокаДляОтвета,400);
			Иначе 
				// Если отправка кода прошла успешно, возвращаем ответ с самим кодом и кодом 200
				Ответ.Вставить("error", ЛОЖЬ);
				Ответ.Вставить("code", Код);
		 		Ответ.Вставить("message", "Пользователь найден");
				СтрокаДляОтвета = ДанныеКакJSON(Ответ);
				Возврат Ответ(СтрокаДляОтвета,200);
			КонецЕсли;
		Иначе
			// Если номера не сопадают, то возвращаем ошибку с кодом 403
			Ответ.Вставить("error", ИСТИНА);
	 		Ответ.Вставить("message", "Номер не совпадает");
			СтрокаДляОтвета = ДанныеКакJSON(Ответ);
			Возврат Ответ(СтрокаДляОтвета,403);
		КонецЕсли
	Иначе  
		// Если пользователь не нейден, формируется ответ с ошибкой
		Ответ.Вставить("error", ИСТИНА);
	 	Ответ.Вставить("message", "Пользователь не обнаружен");
		СтрокаДляОтвета = ДанныеКакJSON(Ответ);
		Возврат Ответ(СтрокаДляОтвета,404);
	КонецЕсли; 
КонецФункции

// Получение информации о пользователе
Функция GetUsenInfoPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	ДанныеПользователя = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);
	
	Если СсылкаНайденногоКонрагента = КонрагентДляПоиска.ПустаяСсылка() Тогда
		// Если пользователь не нейден, формируется ответ с ошибкой
		ДанныеПользователя.Вставить("error", ИСТИНА);
	 	ДанныеПользователя.Вставить("message", "Пользователь не обнаружен"); 
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,404);
	Иначе
		// Иначе собираем данные пользователя
		ДанныеПользователя.Вставить("error", ЛОЖЬ);
		
		//Получение номера телефона 
		ДанныеJSON = СтруктураИзСтрокиJSON(СсылкаНайденногоКонрагента.КонтактнаяИнформация.Получить(0).Значение);
		НомерТелефона = "";
		ДанныеJSON.Свойство("value", НомерТелефона);
		
		//Получение почты
		ДанныеJSON = СтруктураИзСтрокиJSON(СсылкаНайденногоКонрагента.КонтактнаяИнформация.Получить(1).Значение);	
		Почта = "";
		ДанныеJSON.Свойство("value", Почта);
		
		//Получение ссылки на участок
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
		
		//Получение адреса участка
		Адрес = Участок.Адрес;
		
		//Получение площади участка
		Площадь = Участок.Площадь;
		
		//Получение кадастрового номера участка
		КадастровыйНомер = Участок.КадастровыйНомер;		
		
		//Получение информации о долге или переплате
		ДолгПереплата = РегистрыСведений.ЗадолженностьПоВзносамСадоводов.СуммаДолгаПереплатыПоУчастку(Участок);
		СуммаДолга = ДолгПереплата.Долг;
		СуммаПереплаты = ДолгПереплата.Переплата;
		
		//Получение даты последней подачи показаний по электричеству
		Счетчик = Перечисления.ТипыУслугПоСчетчику;
		СчетчикЭлектроэнергии = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, Счетчик.Электроэнергия);
		ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, СчетчикЭлектроэнергии);
		ПоследниеПоказанияЭлектричество = Формат(ПериодПоследнихПоказаний, "ДЛФ=D");
		
		//Получение даты последней подачи показаний по водоснабжению
		ДоступенУчетВоды = Счетчик.ДоступенУчетВоды();
		Если Не ДоступенУчетВоды Тогда
			ПоследниеПоказанияВода = "";
		Иначе
			СчетчикВоды = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, Счетчик.Вода);
			ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, СчетчикВоды);
			ПоследниеПоказанияВода = Формат(ПериодПоследнихПоказаний, "ДЛФ=D");
		КонецЕсли;
		
		//Формирование тела ответа JSON
		ИнформацияИтог = Новый Структура("name,number,email,address,area,cadastral,billduty,billoverpayment,lastbillelectro,lastbillelwater", ФИО, НомерТелефона, Почта, Адрес, Площадь, КадастровыйНомер, СуммаДолга, СуммаПереплаты, ПоследниеПоказанияЭлектричество, ПоследниеПоказанияВода);
		ДанныеПользователя.Вставить("info", ИнформацияИтог);
	 	ДанныеПользователя.Вставить("message", "Пользователь найден");
		
		//Отправка ответа
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,200);
	КонецЕсли;	
КонецФункции

// Поулчение информации о садоводстве
Функция GetGardeninfInfoGET(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	ДанныеСадоводства = Новый Структура;
	
	// Получение ссылки на садоводство
	Садоводство = Справочники.Организации;
	
	// Получение названия садоводства
	Название = Садоводство.ОрганизацияПоУмолчанию();
	
	// Получение адреса садоводства
	Информация = Садоводство.НайтиПоНаименованию(Название).КонтактнаяИнформация;
	ДанныеJSON = СтруктураИзСтрокиJSON(Информация.Получить(0).Значение);
	Адрес = "";
	ДанныеJSON.Свойство("value", Адрес);
	
	// Получение остальных данных садоводства
	ИНН = Садоводство.НайтиПоНаименованию(Название).ГоловнаяОрганизация.ИНН;
	КПП = Садоводство.НайтиПоНаименованию(Название).ГоловнаяОрганизация.КПП;
	ОГРН = Садоводство.НайтиПоНаименованию(Название).ГоловнаяОрганизация.ОГРН;
	Банк = Садоводство.НайтиПоНаименованию(Название).ОсновнойБанковскийСчет.Банк;
	Счет = Садоводство.НайтиПоНаименованию(Название).ОсновнойБанковскийСчет.НомерСчета;
	
	//Формирование тела ответа JSON
	ДанныеСадоводства.Вставить("error", ЛОЖЬ);
	ИнформацияИтог = Новый Структура("name,address,inn,kpp,ogrn,bank,bill ", Строка(Название), Адрес, ИНН, КПП, ОГРН, Строка(Банк), Строка(Счет));
	ДанныеСадоводства.Вставить("info", ИнформацияИтог);
	
	//Отправка ответа
	СтрокаДляОтвета = ДанныеКакJSON(ДанныеСадоводства);
	Возврат Ответ(СтрокаДляОтвета, 200);
КонецФункции

// Получение счета пользователя
Функция GetUserBillsPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	ДанныеПользователя = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);
	
	Если СсылкаНайденногоКонрагента = КонрагентДляПоиска.ПустаяСсылка() Тогда
		// Если пользователь не нейден, формируется ответ с ошибкой
		ДанныеПользователя.Вставить("error", ИСТИНА);
	 	ДанныеПользователя.Вставить("message", "Пользователь не обнаружен"); 
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,404);
	Иначе
		// Иначе получаем информацию о счете пользователя
		ДанныеПользователя.Вставить("error", ЛОЖЬ);
		
		//Получение ссылки на участок
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
			
		//Получение информации о долге или переплате
		ДолгПереплата = РегистрыСведений.ЗадолженностьПоВзносамСадоводов.СуммаДолгаПереплатыПоУчастку(Участок);
		СуммаДолга = ДолгПереплата.Долг;
		СуммаПереплаты = ДолгПереплата.Переплата;
		
		//Получение даты последней подачи показаний по электричеству
		Счетчик = Перечисления.ТипыУслугПоСчетчику;
		СчетчикЭлектроэнергии = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, Счетчик.Электроэнергия);
		ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, СчетчикЭлектроэнергии);
		ПоследниеПоказанияЭлектричество = Формат(ПериодПоследнихПоказаний, "ДЛФ=D");
		
		//Получение даты последней подачи показаний по водоснабжению
		ДоступенУчетВоды = Счетчик.ДоступенУчетВоды();
		Если Не ДоступенУчетВоды Тогда
			ПоследниеПоказанияВода = "";
		Иначе
			СчетчикВоды = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, Счетчик.Вода);
			ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, СчетчикВоды);
			ПоследниеПоказанияВода = Формат(ПериодПоследнихПоказаний, "ДЛФ=D");
		КонецЕсли;

		//Формирование тела ответа JSON
		ИнформацияИтог = Новый Структура("billduty,billoverpayment,lastbillelectro,lastbillelwater", СуммаДолга, СуммаПереплаты, ПоследниеПоказанияЭлектричество, ПоследниеПоказанияВода);
		ДанныеПользователя.Вставить("info", ИнформацияИтог);
		ДанныеПользователя.Вставить("message", "Данные по счетам найдены");
			
		//Отправка ответа
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,200);
	КонецЕсли;
КонецФункции

// Получение счетчиков пользователя
Функция GetUserMetersPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	ДанныеПользователя = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);
	
	Если СсылкаНайденногоКонрагента = КонрагентДляПоиска.ПустаяСсылка() Тогда
		// Если пользователь не нейден, формируется ответ с ошибкой
		ДанныеПользователя.Вставить("error", ИСТИНА);
	 	ДанныеПользователя.Вставить("message", "Пользователь не обнаружен"); 
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,404);
	Иначе
		// Иначе получаем информацию о счетчиках пользователя
		ДанныеПользователя.Вставить("error", ЛОЖЬ);
		
		//Получение ссылки на участок
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
			
		//Получение даты последней подачи показаний по электричеству
		Счетчик = Перечисления.ТипыУслугПоСчетчику;
		СчетчикЭлектроэнергии = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, Счетчик.Электроэнергия);
		ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, СчетчикЭлектроэнергии);
		ДатаПоследниеПоказанияЭлектричество = Формат(ПериодПоследнихПоказаний, "ДЛФ=D");
		
		//Получение даты последней подачи показаний по водоснабжению
		ДоступенУчетВоды = Счетчик.ДоступенУчетВоды();
		Если Не ДоступенУчетВоды Тогда
			ПоследниеПоказанияВода = "";
		Иначе
			СчетчикВоды = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, Счетчик.Вода);
			ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, СчетчикВоды);
			ДатаПоследниеПоказанияВода = Формат(ПериодПоследнихПоказаний, "ДЛФ=D");
		КонецЕсли;
		
		//Получение переданных показаний за все время
		Счетчики = ВсеПоказанияПоСчетчикам(Участок);   
		
		//Получение последних переданных показаний
		СчетчикиПоследние = ПоследниеПоказанияПоВодеИЭлектичеству(Счетчики, ДатаПоследниеПоказанияЭлектричество, Счетчик.Электроэнергия, ДатаПоследниеПоказанияВода, Счетчик.Вода);

		//Формирование тела ответа JSON
		ИнформацияИтог = Новый Структура("meters,lastbillelectrodata,lastbillelwaterdata", СчетчикиПоследние, ДатаПоследниеПоказанияЭлектричество, ДатаПоследниеПоказанияВода);
		ДанныеПользователя.Вставить("info", ИнформацияИтог);
		ДанныеПользователя.Вставить("message", "Счетчики и данные найдены");
			
		//Отправка ответа
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,200);
	КонецЕсли;
КонецФункции

// Внесение новых показаний по счетчикам
Функция SubmitMeterReadingsPOST(Запрос)
	// Получение ФИО и Типа показаний из запроса 
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	Тип = "";
	ДанныеJSON.Свойство("bio", ФИО);
	ДанныеJSON.Свойство("type", Тип);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);
	
	Если СсылкаНайденногоКонрагента = КонрагентДляПоиска.ПустаяСсылка() Тогда
		// Создание структуры для записи ответа запроса
		ДанныеПользователя = Новый Структура;
		
		// Если пользователь не нейден, формируется ответ с ошибкой
		ДанныеПользователя.Вставить("error", ИСТИНА);
	 	ДанныеПользователя.Вставить("message", "Пользователь не обнаружен"); 
		СтрокаДляОтвета = ДанныеКакJSON(ДанныеПользователя);
		Возврат Ответ(СтрокаДляОтвета,404);
	Иначе
		//Получение ссылки на участок
		Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
		
		// Сохранение показаний в зависимости от типа
		Если Тип = "Электроэнергия" Тогда
			Ответ = ПредачаПоказанийПоСчетчику(Участок, Перечисления.ТипыУслугПоСчетчику.Электроэнергия, ДанныеJSON);
		ИначеЕсли Тип = "Вода" Тогда
			Ответ = ПредачаПоказанийПоСчетчику(Участок, Перечисления.ТипыУслугПоСчетчику.Вода, ДанныеJSON);
		Иначе 
			Ответ = Новый Структура("error,message,code", ИСТИНА, "Неверный тип счетчика", 400);	
		КонецЕсли;
		
		//Получаем код из Структуры "Ответ"
		Код = Ответ.code;
		Ответ.Удалить("code");
		
		//Возвращаем ответ с Код
		СтрокаДляОтвета = ДанныеКакJSON(Ответ);
		Возврат Ответ(СтрокаДляОтвета,Код)
	КонецЕсли;
КонецФункции

// Формирование и отправка клиенту квитанции для оплаты
Функция GetReceiptPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	Ответ = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);

	// Получение ссылки на участок
	Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
	
	// Получение почты садовода
	ДанныеJSON = СтруктураИзСтрокиJSON(СсылкаНайденногоКонрагента.КонтактнаяИнформация.Получить(1).Значение);	
	Почта = "";
	ДанныеJSON.Свойство("value", Почта);
	
	// Проверка, что к пользователю привязан адрес электронной почты
	Если Почта = "" Тогда
		// Если не привязан, формируется ответ с кодом 404
		Ответ.Вставить("error", ИСТИНА);
		Ответ.Вставить("message", "К аккаунту не привязан адрес электронной почты, обратитесь к администратору");
		СтрокаДляОтвета = ДанныеКакJSON(Ответ);
		Возврат Ответ(СтрокаДляОтвета,404);
	Иначе
		// Если привязан, формируем квитанцию и отправляем на указанный адрес
		
		МассивВзносов = Новый Массив;
		ДанныеПоВзносамНаОплату = РасчетыПоВзносамСадоводов.ВзносыКОплате(Участок);;
		Для Каждого ЗаписьДанныеПоВзносамНаОплату Из ДанныеПоВзносамНаОплату Цикл
			МассивВзносов.Добавить(ЗаписьДанныеПоВзносамНаОплату.Взнос);
		КонецЦикла;
		
		Результат = ПечатьДокумента(Участок, МассивВзносов, Почта);
	
		Если Результат.Ошибка Тогда
			Ответ.Вставить("error", Результат.Ошибка);
			Ответ.Вставить("message", Результат.Сообщение);
			СтрокаДляОтвета = ДанныеКакJSON(Ответ);
			Возврат Ответ(СтрокаДляОтвета,400);
		Иначе
			Ответ.Вставить("error", Результат.Ошибка);
			Ответ.Вставить("message", Результат.Сообщение);
			СтрокаДляОтвета = ДанныеКакJSON(Ответ);
			Возврат Ответ(СтрокаДляОтвета,200);
		КонецЕсли
	КонецЕсли
КонецФункции

// Повторная отправка кода авторизации
Функция SendCodePOST(Запрос)
	// Создание структуры для записи ответа запроса
	Ответ = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	Пользователь = Справочники.Контрагенты.НайтиПоНаименованию(ФИО);
	
	// Получаем из базы сохраненный телефон пользователя
	НомерТелефона = Пользователь.КонтактнаяИнформация.Итог("НомерТелефона");
	
	Код = ГенерацияИОтправкаКодаАвторизации(НомерТелефона);
			
	Если Код = 0 Тогда
		// Если при отправке кода произошла ошибка, выводим ответ с кодом 400 
		Ответ.Вставить("error", ИСТИНА);
	 	Ответ.Вставить("message", "Не удалось отправить код для аутентификации");
		СтрокаДляОтвета = ДанныеКакJSON(Ответ);
		Возврат Ответ(СтрокаДляОтвета,400);
	Иначе 
		// Если отправка кода прошла успешно, возвращаем ответ с самим кодом и кодом 200
		Ответ.Вставить("error", ЛОЖЬ);
		Ответ.Вставить("code", Код);
		Ответ.Вставить("message", "Пользователь найден");
		СтрокаДляОтвета = ДанныеКакJSON(Ответ);
		Возврат Ответ(СтрокаДляОтвета,200);
	КонецЕсли;
КонецФункции

// Обработка оплаты платежа
Функция PaymentProcessingPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	Ответ = Новый Структура;
	
	// Получение из запроса ФИО пользователя
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);

	// Получение ссылки на участок
	Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
	
	// Получение из запроса даты 
	Дата = "";
	ДанныеJSON.Свойство("date", Дата);
	
	// Получение из запроса суммы оплаты 
	СуммаДокумента = "";
	ДанныеJSON.Свойство("sum", СуммаДокумента);
	
	ДокументОплатаПлатежнойКартой = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
	ДокументОплатаПлатежнойКартой.Контрагент           = Участок;
	ДокументОплатаПлатежнойКартой.Дата                 = Дата;
	ДокументОплатаПлатежнойКартой.Организация          = Участок.Организация;
	ДокументОплатаПлатежнойКартой.СуммаДокумента       = СуммаДокумента;
	ДокументОплатаПлатежнойКартой.ВидОперации          = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВзносыСадоводов;
	ДокументОплатаПлатежнойКартой.ВидОплаты            = ИнтеграцияСЯндексКассойБП.НайтиИлиСоздатьВидОплаты(Участок.Организация);
	ДокументОплатаПлатежнойКартой.СпособПодбораВзносов = Перечисления.СпособыПодбораВзносовНаОплату.Ручной;
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ДокументОплатаПлатежнойКартой.ВалютаДокумента      = ВалютаРегламентированногоУчета;
	
	ВидОплатыРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОплатаПлатежнойКартой.ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
	ДокументОплатаПлатежнойКартой.СчетКасса            = ВидОплатыРеквизиты.СчетУчетаРасчетов;
	ДокументОплатаПлатежнойКартой.Эквайер              = ВидОплатыРеквизиты.Контрагент;
	ДокументОплатаПлатежнойКартой.ДоговорЭквайринга    = ВидОплатыРеквизиты.ДоговорКонтрагента;
	
	РасшифровкаПлатежа = ДокументОплатаПлатежнойКартой.РасшифровкаПлатежа.Добавить(); 
	РасшифровкаПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;	
	РасшифровкаПлатежа.СуммаПлатежа = СуммаДокумента;
	
	Попытка	
		ДокументОплатаПлатежнойКартой.ДополнительныеСвойства.Вставить("ОбменСЛичнымКабинетом", Истина);
		ДокументОплатаПлатежнойКартой.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить оплату из ЮKassa. Причина: %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Ответ.Вставить("error", ИСТИНА);
		Ответ.Вставить("message", ТекстОшибки);
		СтрокаДляОтвета = ДанныеКакJSON(Ответ);
		Возврат Ответ(СтрокаДляОтвета,400)	
	КонецПопытки;
		
	Ответ.Вставить("error", ЛОЖЬ);
	Ответ.Вставить("message", "Успешная обработка оплаты");
	СтрокаДляОтвета = ДанныеКакJSON(Ответ);
	Возврат Ответ(СтрокаДляОтвета,200)
КонецФункции

// Получение информации для оплаты через банк
Функция GetPaymentInfoPOST(Запрос)
	// Создание структуры для записи данных пользователя (ответа запроса)
	ДанныеСадоводства = Новый Структура;
	
	// Получение ссылки на садоводство
	Садоводство = Справочники.Организации;
	
	// Получение названия садоводства
	Название = Садоводство.ОрганизацияПоУмолчанию();
	
	// Получение данных для оплаты
	Получатель = Садоводство.НайтиПоНаименованию(Название).Наименование;
	ИНН = Садоводство.НайтиПоНаименованию(Название).ГоловнаяОрганизация.ИНН;
	КПП = Садоводство.НайтиПоНаименованию(Название).ГоловнаяОрганизация.КПП;
	Банк = Садоводство.НайтиПоНаименованию(Название).ОсновнойБанковскийСчет.Банк;
	Счет = Садоводство.НайтиПоНаименованию(Название).ОсновнойБанковскийСчет.НомерСчета;
	
	// Получение ФИО из запроса
	ДанныеJSON = СтруктураИзСтрокиJSON(Запрос.ПолучитьТелоКакСтроку("UTF-8")); 
	ФИО = "";
	ДанныеJSON.Свойство("bio", ФИО);
	
	// Получение ссылки на участника садоводства
	КонрагентДляПоиска = Справочники.Контрагенты;
    СсылкаНайденногоКонрагента = КонрагентДляПоиска.НайтиПоНаименованию(ФИО);

	// Получение ссылки на участок
	Участок = Справочники.Участки.НайтиПоРеквизиту("ВладелецУчастка",СсылкаНайденногоКонрагента);
	
	// Получение номера участка
	НомерЛС = Участок.НомерУчастка;
	
	// Получение назначения платежа
	Назначение = СтрШаблон(НСтр("ru='Взносы,Участок № %1;%2'"), НомерЛС, ФИО);
	
	// Получение суммы к оплате
	ДолгПереплата = РегистрыСведений.ЗадолженностьПоВзносамСадоводов.СуммаДолгаПереплатыПоУчастку(Участок);
	Долг = ДолгПереплата.Долг;
	
	//Формирование тела ответа JSON
	ДанныеСадоводства.Вставить("error", ЛОЖЬ);
	ИнформацияИтог = Новый Структура("recipient,inn,kpp,bank,bill,numberLK,purpose,duty", Получатель, ИНН, КПП, Строка(Банк), Строка(Счет), Строка(НомерЛС), Назначение, Строка(Долг));
	ДанныеСадоводства.Вставить("info", ИнформацияИтог);
	
	//Отправка ответа
	СтрокаДляОтвета = ДанныеКакJSON(ДанныеСадоводства);
	Возврат Ответ(СтрокаДляОтвета, 200);
КонецФункции

#КонецОбласти

#Область ФункцииДляМетодов

// Генерация одноразового кода авторизации и отправка на указанный номер телефона.
//
// Параметры:
//  НомерТелефона - номер телефона пользователя, указаннуб при авторизации.
// 
// Возвращаемое значение:
//  - Код ошибки при отправке сообщения или 0, если сообщение отправлено.
//
Функция ГенерацияИОтправкаКодаАвторизации(НомерТелефона)
	Гсч = Новый ГенераторСлучайныхЧисел();
	Код = Гсч.СлучайноеЧисло(100000,999999);
	
	НомерПолучателя = Новый Массив;
	НомерПолучателя.Добавить(НомерТелефона);
	
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(НомерПолучателя, Строка("Код для авторизации в личном кабинете садовода - " + Код),,);
	
	Если ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда
		Если РезультатОтправки.ОтправленныеСообщения.Количество() > 0 Тогда
			ИдентификаторСообщения = РезультатОтправки.ОтправленныеСообщения[0].ИдентификаторСообщения;
			Возврат Код;
		КонецЕсли;
	КонецЕсли;

	Возврат 0;
КонецФункции

// Получение всех показаний по всем счетчикам для участка.
//
// Параметры:
//  Участок - Справочники.Участки - ссылка на участок пользователя.
// 
// Возвращаемое значение:
//  - Массив со всеми переданными показаниями по участку.
//
Функция ВсеПоказанияПоСчетчикам(Участок)
	ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПоказанияСчетчиков.Номер КАК Номер,
			|	ПоказанияСчетчиков.УслугаПоСчетчику КАК УслугаПоСчетчику,
			|	ПоказанияСчетчиков.Участок КАК Участок,
			|	ПоказанияСчетчиков.Счетчик КАК Счетчик,
			|	ПоказанияСчетчиков.ПоказаниеТ1 КАК ПоказаниеТ1,
			|	ПоказанияСчетчиков.ПоказаниеТ2 КАК ПоказаниеТ2,
			|	ПоказанияСчетчиков.ПоказаниеТ3 КАК ПоказаниеТ3,
			|	ПоказанияСчетчиков.РасходТ1 КАК РасходТ1,
			|	ПоказанияСчетчиков.РасходТ2 КАК РасходТ2,
			|	ПоказанияСчетчиков.РасходТ3 КАК РасходТ3,
			|	ПоказанияСчетчиков.ТарифТ1 КАК ТарифТ1,
			|	ПоказанияСчетчиков.ТарифТ2 КАК ТарифТ2,
			|	ПоказанияСчетчиков.ТарифТ3 КАК ТарифТ3,
			|	ПоказанияСчетчиков.ПроцентПотерь КАК ПроцентПотерь,
			|	ПоказанияСчетчиков.Потери КАК Потери,
			|	ПоказанияСчетчиков.Начислено КАК Начислено,
			|	ПоказанияСчетчиков.Дата КАК Дата
			|ИЗ
			|	Документ.ПоказанияСчетчиков КАК ПоказанияСчетчиков
			|ГДЕ
			|	ПоказанияСчетчиков.Участок = &участок
			|	И НЕ ПоказанияСчетчиков.Счетчик ЕСТЬ NULL";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("участок", Участок);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоЭлементов = Выборка.Количество();
	
	Счетчики = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Счетчик = Новый Структура; 
		Счетчик.Вставить("servicebymeter",Строка(Справочники.Счетчики.УслугаПоСчетчику(Выборка.Счетчик)));
		Счетчик.Вставить("address",Выборка.Участок.Адрес);
		Счетчик.Вставить("mark",Выборка.Счетчик.Марка);
		Счетчик.Вставить("code",Выборка.Счетчик.НомерПломбы);
		Счетчик.Вставить("date",Формат(Выборка.Дата, "ДЛФ=D"));
		Счетчик.Вставить("datat1",Выборка.ПоказаниеТ1);
		Счетчик.Вставить("datat2",Выборка.ПоказаниеТ2);
		Счетчик.Вставить("datat3",Выборка.ПоказаниеТ3);
		Счетчик.Вставить("consumptiont1",Выборка.РасходТ1);
		Счетчик.Вставить("consumptiont2",Выборка.РасходТ2);
		Счетчик.Вставить("consumptiont3",Выборка.РасходТ3);
		Счетчик.Вставить("ratet1",Выборка.ТарифТ1);
		Счетчик.Вставить("ratet2",Выборка.ТарифТ2);
		Счетчик.Вставить("ratet3",Выборка.ТарифТ3);
		Счетчик.Вставить("accrued",Выборка.Начислено);
		Счетчики.Добавить(Счетчик);
	КонецЦикла;	
	Возврат Счетчики;
КонецФункции

// Получение псоледних показаний по счетчикам водоснабжения и электроэнергии.
//
// Параметры:
//  Счетчик - Справочники.Счетчики - ссылка на счетчик по которому нужно найти показания.
//  ДатаПоследниеПоказанияЭлектричество - Дата последей подачи показаний по счетчику электричества.
//  СчетчикЭлектроэнергии - Перечисления.ТипыУслугПоСчетчику.Электроэнергия.
//  ДатаПоследниеПоказанияВода - Дата последей подачи показаний по счетчику водоснаюжения.
//  СчетчикВоды - Перечисления.ТипыУслугПоСчетчику.Вода.
// 
// Возвращаемое значение:
//  - Массив с последними показаниями по водоснабжению и электроэнергии.
//
Функция ПоследниеПоказанияПоВодеИЭлектичеству(Счетчики, ДатаПоследниеПоказанияЭлектричество, СчетчикЭлектроэнергии, ДатаПоследниеПоказанияВода, СчетчикВоды)
	ПоследниеПоказания = новый Массив();
	
	Для Каждого Счетчик из Счетчики Цикл
		Если Счетчик.servicebymeter = Строка(СчетчикЭлектроэнергии) И Счетчик.date = ДатаПоследниеПоказанияЭлектричество Тогда
			ПоследниеПоказания.Добавить(Счетчик);
		КонецЕсли;
		
		Если ДатаПоследниеПоказанияВода <> "" И Счетчик.servicebymeter = Строка(СчетчикВоды) И Счетчик.date = ДатаПоследниеПоказанияВода Тогда
			ПоследниеПоказания.Добавить(Счетчик);
		ИначеЕсли ДатаПоследниеПоказанияВода = "" И Счетчик.servicebymeter = Строка(СчетчикВоды) Тогда
			ПоследниеПоказания.Добавить(Счетчик);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ПоследниеПоказания;
КонецФункции

// Сохраняет в базу информацию по переданным показаниям для счетчика.
//
// Параметры:
//  Участок - Справочники.Участки - ссылка на участок пользователя.
//  ТипСчетчика - Перечисления.ТипыУслугПоСчетчику - тип счетчика, по которому переданы показания.
//  ДанныеJSON - данные, переданные в запросе.
// 
// Возвращаемое значение:
//  - структура Ответ с флагом ошибки, сообщением и кодом ответа.
//
Функция ПредачаПоказанийПоСчетчику(Участок, ТипСчетчика, ДанныеJSON)
	// Создание структуры для записи ответа запроса
	Ответ = Новый Структура;
		
	// Получение счетчика нужного типа
	Счетчик = Справочники.Счетчики.СчетчикПоУмолчанию(Участок, ТипСчетчика);
	
	// ПОлучение новых показаний и даты из запроса
	ЗначТ1 = "";
	ЗначТ2 = "";
	ЗначТ3 = "";
	ДатаПоказаний = "";
	ДанныеJSON.Свойство("valuet1", ЗначТ1);
	ДанныеJSON.Свойство("valuet2", ЗначТ2);
	ДанныеJSON.Свойство("valuet3", ЗначТ3);
	ДанныеJSON.Свойство("date", ДатаПоказаний);
	
	// Представление даты передачи показаний к типу Дата
	Период = Дата(ДатаПоказаний);
	
	// Формирование реквезитов счетчика
	РеквизитыСчетчика = Новый Структура();
	РеквизитыСчетчика.Вставить("Участок",         "Владелец");
	РеквизитыСчетчика.Вставить("Счетчик",         "Ссылка");
	РеквизитыСчетчика.Вставить("УслугаПоСчетчику","УслугаПоСчетчику");
	РеквизитыСчетчика.Вставить("Организация",     "Организация");
		
	//Формирование шапки документа
	РеквизитыШапкиДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счетчик, РеквизитыСчетчика);
		
	//Получение даты последних показаний
	ПериодПоследнихПоказаний = РегистрыСведений.ПоказанияСчетчиков.ПериодПоследнихПоказаний(Участок, Счетчик);

	//Получение ссылки на документ с показаниями счетчика и его объекта
	ДокументСсылкаПоказанияСчетчика = ПолучитьДокументПоказанияСчетчикаНаДату(Счетчик, Участок, ПериодПоследнихПоказаний);		
	ДокументПоказанияСчетчиков = ДокументСсылкаПоказанияСчетчика.ПолучитьОбъект();
	
	// Формирование документа с инеформацией о переданных показаниях
	Показания = Документы.ПоказанияСчетчиков.СоздатьДокумент();
	Показания.Организация = Участок.Организация;
	Показания.Счетчик = Счетчик;
	Показания.УслугаПоСчетчику = Показания.Счетчик.УслугаПоСчетчику;
	Показания.Участок = Участок;
	Показания.Дата = ПериодПоследнихПоказаний;
	    
	Показания.ПоказаниеТ1 = ЗначТ1;
	Показания.ПоказаниеТ2 = ЗначТ2;
	Показания.ПоказаниеТ3 = ЗначТ3;
	
	ПоказанияТ1Оплата = ЗначТ1 - ДокументПоказанияСчетчиков.ПоказаниеТ1;
	ПоказанияТ2Оплата = ЗначТ2 - ДокументПоказанияСчетчиков.ПоказаниеТ2;
	ПоказанияТ3Оплата = ЗначТ3 - ДокументПоказанияСчетчиков.ПоказаниеТ3;
    
	Показания.РасходТ1 = ПоказанияТ1Оплата;
	Показания.РасходТ2 = ПоказанияТ2Оплата;
	Показания.РасходТ3 = ПоказанияТ3Оплата;
	
	// Заполнение стоимости тарифов и процента потерь
	РегистрыСведений.ПоказанияСчетчиков.ЗаполнитьСтоимостьТарифаИПроцентПотерьНаДату(Показания);
	
	// Рассчет начислений по счетчику
	Показания.Начислено = ПоказанияТ1Оплата*Показания.ТарифТ1 +  ПоказанияТ2Оплата*Показания.ТарифТ2 + ПоказанияТ3Оплата*Показания.ТарифТ3;
	
	Если ПериодПоследнихПоказаний >= НачалоДня(Период) Тогда
		Показания.Дата = ПериодПоследнихПоказаний + 86400;
	ИначеЕсли ПериодПоследнихПоказаний < НачалоДня(Период) Тогда
		Показания.Дата = Период;
	КонецЕсли;
		
	// Проверка, что переданные показания больше сохраненных
	Если ЭтоЗаписьНаУменьшение(Показания, ДокументПоказанияСчетчиков) Тогда
		//Если новые данные меньше, то формируем ответ с кодом 403 и сообщением об ошибке
		Ответ.Вставить("error", ИСТИНА);
		Ответ.Вставить("message", "Переданные данные меньше сохраненных");
		Ответ.Вставить("code", 403);
		Возврат Ответ;
	КонецЕсли;	
	
	// Запись новых данных в базу
	Показания.Записать(РежимЗаписиДокумента.Проведение);
		
	// Если показания сохранились, формируем ответ с кодом 200
	Ответ.Вставить("error", ЛОЖЬ);
	Ответ.Вставить("message", "Показания переданы");
	Ответ.Вставить("code", 200);
	Возврат Ответ;	
КонецФункции

// Проверяет, что переданные показания больше или равны последним сохраненным.
//
// Параметры:
//  НоваяЗапись - РегистрыСведений.ПоказанияСчетчиков - новые показания счетчика.
//  СтараяЗапись - РегистрыСведений.ПоказанияСчетчиков - последние сохраненные показания счетчика.
// 
// Возвращаемое значение:
//  - ИСТИНА или ЛОЖЬ в зависимости от того, меньше новые показания или больше сохраненных.
//
Функция ЭтоЗаписьНаУменьшение(НоваяЗапись, СтараяЗапись)
	Возврат Число(НоваяЗапись.ПоказаниеТ1) < Число(СтараяЗапись.ПоказаниеТ1) 
		ИЛИ Число(НоваяЗапись.ПоказаниеТ2) < Число(СтараяЗапись.ПоказаниеТ2) 
		ИЛИ Число(НоваяЗапись.ПоказаниеТ3) < Число(СтараяЗапись.ПоказаниеТ3)
КонецФункции 

// Получение показаний по счетчику на дату.
//
// Параметры:
//  Счетчик - Справочники.Счетчики - ссылка на счетчик по которому нужно найти показания.
//  Участок - Справочники.Участки - ссылка на участок пользователя.
//  Период - Дата - дата, на которую нужно найти показания.
// 
// Возвращаемое значение:
//  - РегистрыСведений.ПоказанияСчетчиков - последние сохраненные показания счетчика на дату.
//
Функция ПолучитьДокументПоказанияСчетчикаНаДату(Счетчик, Участок, Период)
	РегистраторЗаписиПоПериоду = РегистрыСведений.ПоказанияСчетчиков.РегистраторЗаписиПоПериоду(Участок, Счетчик, Период);
	
	Если НЕ ЗначениеЗаполнено(РегистраторЗаписиПоПериоду) Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru='Не удалось получить регистратор записи для счетчика %1 участка %2 за %3'"), Счетчик, Участок, Период);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат РегистраторЗаписиПоПериоду;
КонецФункции

// Формирование квитанции по массиву взносов.
//
// Параметры:
//  Участок - Справочники.Участки - ссылка на участок пользователя.
//  МассивВзносов - массив со взносами, по которым нужно сформировать квитанцию.
//  Почта - почта пользователя, на которую надо отправить квитанцию.
// 
// Возвращаемое значение:
//  - структура Результат с флагом ошибки и сообщением.
//
Функция ПечатьДокумента(Участок, МассивВзносов, Почта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("Сообщение", "");
	
	ФорматПакета    = ТипФайлаПакетаОтображаемыхДокументов.PDF;
	ФорматДокумента = ТипФайлаТабличногоДокумента.PDF;
	
	ПечатныеФормыОбъекта        = Неопределено;
	ЕстьОшибки                  = Ложь;
	ПакетОтображаемыхДокументов = Новый ПакетОтображаемыхДокументов;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Участок);
	
	КомандыОтправки = ОтправкаПочтовыхСообщений.КомандыОтправки();
	КомандыОтправки.Колонки.Добавить("ОбъектыОтправки");
	Справочники.Участки.ДобавитьКомандыОтправки(КомандыОтправки, "КвитанцияПД4");
	АдресКомандОтправки = ПоместитьВоВременноеХранилище(КомандыОтправки, Новый УникальныйИдентификатор);
	ОписаниеКоманды = ОтправкаПочтовыхСообщенийВызовСервера.ОписаниеКомандыОтправки("КвитанцияПД4", АдресКомандОтправки);
	ОписаниеКоманды.ДополнительныеПараметры.Вставить("ФормироватьСтандартноеОписаниеПисьма", Ложь);
	ОписаниеКоманды.ДополнительныеПараметры.Вставить("ВзносыНаПечать", МассивВзносов);
	ОписаниеКоманды.ОбъектыОтправки = МассивОбъектов;
	СинонимМакета = ОписаниеКоманды.Представление;
	
	ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(ОписаниеКоманды.МенеджерПечати,
		ОписаниеКоманды.Идентификатор, ОписаниеКоманды.ОбъектыОтправки, ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ПечатныеФормы.Отказ Тогда
		Результат.Ошибка = Истина;	
		Результат.Сообщение = НСтр("ru=' Не удалось сформировать Квитанцию'");
		Возврат Результат;
	КонецЕсли;
	
	Если ПечатныеФормы.ТабличныеДокументы.Количество() = 0 Тогда
		Результат.Ошибка = Истина;
		Результат.Сообщение = НСтр("ru=' Не удалось сформировать Квитанцию: проверьте заполнение сведений об организации'");
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПечатнаяФорма Из ПечатныеФормы.ТабличныеДокументы Цикл
		ТабличныйДокумент = ПечатнаяФорма.Значение;
		ПакетОтображаемыхДокументов.Состав.Добавить().Данные = ПоместитьВоВременноеХранилище(ТабличныйДокумент);
	КонецЦикла;
	
	//ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	ИмяФайла = "C:\Users\User\Desktop\Квитанция.pdf";
	ПакетОтображаемыхДокументов.Записать(ИмяФайла, ФорматПакета);
	
	Результат = ОтправкаКвитанцииНаПочту(ИмяФайла, Почта, Результат);
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет в базу информацию по переданным показаниям для счетчика.
//
// Параметры:
//  ИмяФайла - путь до фсормированной квитанции.
//  Почта - почта пользователя, на которую надо отправить квитанцию.
//  Результат - структура с флагом ошибки и сообщением.
// 
// Возвращаемое значение:
//  - структура Результат с флагом ошибки и сообщением.
//
Функция ОтправкаКвитанцииНаПочту(ИмяФайла, Почта, Результат)
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ОрганизацияНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеСокращенное");
	ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Квитанция на оплату от %1'"), ОрганизацияНаименование);
		
	ТекстПисьма = СтрШаблон(НСтр("ru = 'Добрый день, дорогой садовод!
	|
	|К письму приложены документы:
	|- Квитанция
	|
	|С уважением, Администратор %1'"), ОрганизацияНаименование);
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		Результат.Сообщение = ТекстСообщения;
		Возврат Результат;
	КонецЕсли;
	УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Получатели.Добавить(Почта);
	Письмо.Тема = ТемаПисьма;
	Письмо.Тексты.Добавить(ТекстПисьма);
	Письмо.Вложения.Добавить(ИмяФайла, "Квитанция");
		
	РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
	
	Результат.Сообщение = "Квитанция отправлена";
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеФункции

Функция Ответ(ДанныеJSON, КодОтвета)
	
	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Ответ.Заголовки.Вставить("Accept-Charset", "utf-8");
	Ответ.Заголовки.Вставить("Content-Type", "application/json;charset=utf-8");
	Ответ.Заголовки["Cache-Control"] = "no-cache";
	Ответ.Заголовки["Content-Length"] = Формат(СтрДлина(ДанныеJSON),"ЧГ=0");
	
	Ответ.УстановитьТелоИзСтроки(ДанныеJSON);
	
	Возврат Ответ;
	
КонецФункции

Функция ДанныеКакJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция СтруктураИзСтрокиJSON(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Ответ = ПрочитатьJSON(ЧтениеJSON);
	Возврат Ответ
	
КонецФункции

#КонецОбласти

#КонецОбласти

